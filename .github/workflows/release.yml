name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.2.3)"
        required: true
        type: string

env:
  NODE_VERSION: "18"

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi

          # Validate version format
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format: $VERSION"
            echo "Expected format: v1.2.3"
            exit 1
          fi

          # Extract version without 'v' prefix
          VERSION_NUMBER=${VERSION#v}

          echo "version=$VERSION_NUMBER" >> $GITHUB_OUTPUT
          echo "tag=$VERSION" >> $GITHUB_OUTPUT

          echo "‚úÖ Release version: $VERSION"
          echo "üì¶ Package version: $VERSION_NUMBER"

      - name: Validate package.json version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          EXPECTED_VERSION="${{ steps.version.outputs.version }}"

          if [ "$PACKAGE_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "Error: Version mismatch!"
            echo "package.json version: $PACKAGE_VERSION"
            echo "Tag version: $EXPECTED_VERSION"
            exit 1
          fi

          echo "‚úÖ Version validation passed"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run check

      - name: Run tests
        run: npm run test:run

      - name: Build application
        run: npm run build

      - name: Run security audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ needs.validate.outputs.version }}
          path: dist/
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "Running security audit..."
          npm audit --audit-level=moderate --json > audit-results.json || true

          # Check for high/critical vulnerabilities
          HIGH_VULNS=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.critical // 0')

          echo "High severity vulnerabilities: $HIGH_VULNS"
          echo "Critical severity vulnerabilities: $CRITICAL_VULNS"

          if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "‚ùå Security vulnerabilities found!"
            echo "Please fix security issues before releasing."
            exit 1
          fi

          echo "‚úÖ Security scan passed"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, test, security-scan]
    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.validate.outputs.version }}
          path: dist/

      - name: Create release archive
        run: |
          cd dist
          tar -czf ../fugir-io-${{ needs.validate.outputs.version }}.tar.gz .
          cd ..
          zip -r fugir-io-${{ needs.validate.outputs.version }}.zip dist/

      - name: Extract changelog for release
        id: changelog
        run: |
          VERSION="${{ needs.validate.outputs.version }}"

          if [ -f "CHANGELOG.md" ]; then
            # Extract changelog entry for this version
            awk "/^## \[$VERSION\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > release-notes.md
            
            # If no specific version entry found, create a simple one
            if [ ! -s release-notes.md ]; then
              echo "Release v$VERSION" > release-notes.md
              echo "" >> release-notes.md
              echo "See commit history for detailed changes." >> release-notes.md
            fi
          else
            echo "Release v$VERSION" > release-notes.md
            echo "" >> release-notes.md
            echo "See commit history for detailed changes." >> release-notes.md
          fi

          echo "Release notes:"
          cat release-notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate.outputs.tag }}
          name: Release ${{ needs.validate.outputs.tag }}
          body_path: release-notes.md
          draft: false
          prerelease: false
          files: |
            fugir-io-${{ needs.validate.outputs.version }}.tar.gz
            fugir-io-${{ needs.validate.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [validate, test, security-scan, create-release]
    environment:
      name: production
      url: https://fugir-io.github.io

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          cname: fugir-io.github.io

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate, create-release, deploy]
    if: always()

    steps:
      - name: Release Success Notification
        if: needs.create-release.result == 'success' && needs.deploy.result == 'success'
        run: |
          echo "üéâ Release ${{ needs.validate.outputs.tag }} completed successfully!"
          echo "üöÄ Deployed to: https://fugir-io.github.io"
          echo "üì¶ Release: https://github.com/fugir-io/fugir-io.github.io/releases/tag/${{ needs.validate.outputs.tag }}"

      - name: Release Failure Notification
        if: needs.create-release.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Release ${{ needs.validate.outputs.tag }} failed!"
          echo "Please check the workflow logs for details."
          exit 1
